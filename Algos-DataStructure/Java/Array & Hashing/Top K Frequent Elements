import java.util.*;

class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        HashMap<Integer, Integer> hashMap = new HashMap<>();
        int count = 1;

        // Sorting the array
        Arrays.sort(nums);

        // Counting the frequency of each number in the array
        for (int i = 0; i < nums.length; i++) {
            if (i > 0 && nums[i - 1] != nums[i]) {
                count = 1; // Reset count for a new number
            } else if (i > 0) {
                count++; // Increment count for the same number
            }
            hashMap.put(nums[i], count);
        }

        // PriorityQueue to get the top k frequent elements
        PriorityQueue<Integer> pq = new PriorityQueue<>(
            (a, b) -> hashMap.get(b) - hashMap.get(a)
        );
        pq.addAll(hashMap.keySet());

        // Retrieve the top k frequent elements from the PriorityQueue
        int[] result = new int[k];
        for (int i = 0; i < k; i++) {
            if (!pq.isEmpty()) {
                result[i] = pq.poll();  // Remove the element with the highest frequency
            }
        }

        return result;
    }     
}
